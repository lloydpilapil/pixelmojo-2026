{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer2/source-files'\nimport rehypeSlug from 'rehype-slug'\n\n// Type definitions for ToC\nexport interface TOCItem {\n  id: string\n  text: string\n  level: number\n}\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description:\n        'The title of the post (recommended: 50-60 characters for SEO)',\n      required: true,\n    },\n    date: {\n      type: 'date',\n      description: 'The publication date of the post',\n      required: true,\n    },\n    createdDate: {\n      type: 'date',\n      description: 'The date when the post was first created',\n      required: false,\n    },\n    updatedDate: {\n      type: 'date',\n      description: 'The date when the post was last updated',\n      required: false,\n    },\n    description: {\n      type: 'string',\n      description:\n        'The description of the post (recommended: 120-160 characters for SEO)',\n      required: false,\n    },\n    tags: {\n      type: 'list',\n      of: { type: 'string' },\n      description: 'Tags for the post',\n      required: false,\n    },\n    showTOC: {\n      type: 'boolean',\n      description: 'Whether to show table of contents in sidebar',\n      required: false,\n      default: true,\n    },\n    showCTA: {\n      type: 'boolean',\n      description: 'Whether to show CTA in sidebar',\n      required: false,\n      default: true,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: post => `/blog/${post._raw.flattenedPath}`,\n    },\n    headings: {\n      type: 'json',\n      resolve: async doc => {\n        // Process the raw MDX to extract headings\n        const headingsRegex = /^(#{1,6})\\s+(.+)$/gm\n        const headings: TOCItem[] = []\n        let match\n\n        while ((match = headingsRegex.exec(doc.body.raw)) !== null) {\n          const level = match[1].length\n          const text = match[2].trim()\n\n          // Generate slug to match rehype-slug\n          const id = text\n            .toLowerCase()\n            .trim()\n            .replace(/[^\\w\\s-]/g, '')\n            .replace(/[\\s_]+/g, '-')\n            .replace(/^-+|-+$/g, '')\n\n          headings.push({\n            id,\n            text,\n            level,\n          })\n        }\n\n        return headings\n      },\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Post],\n  mdx: {\n    rehypePlugins: [rehypeSlug],\n  },\n})\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,gBAAgB;AAShB,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aACE;AAAA,MACF,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aACE;AAAA,MACF,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,MACV,SAAS;AAAA,IACX;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,MACV,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,UAAQ,SAAS,KAAK,KAAK,aAAa;AAAA,IACnD;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS,OAAM,QAAO;AAEpB,cAAM,gBAAgB;AACtB,cAAM,WAAsB,CAAC;AAC7B,YAAI;AAEJ,gBAAQ,QAAQ,cAAc,KAAK,IAAI,KAAK,GAAG,OAAO,MAAM;AAC1D,gBAAM,QAAQ,MAAM,CAAC,EAAE;AACvB,gBAAM,OAAO,MAAM,CAAC,EAAE,KAAK;AAG3B,gBAAM,KAAK,KACR,YAAY,EACZ,KAAK,EACL,QAAQ,aAAa,EAAE,EACvB,QAAQ,WAAW,GAAG,EACtB,QAAQ,YAAY,EAAE;AAEzB,mBAAS,KAAK;AAAA,YACZ;AAAA,YACA;AAAA,YACA;AAAA,UACF,CAAC;AAAA,QACH;AAEA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,UAAU;AAAA,EAC5B;AACF,CAAC;",
  "names": []
}
